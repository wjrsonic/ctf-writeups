from Crypto.Cipher import AES
import struct
import gmpy2
from libnum import n2s

key = b'+\x1b\x89=]\x04\xf0\x06A\xca\x0b\x9eJ\xbc\xedxp0f\xe3\x02\xb4^\t\xbb\xce\xda.\x0f\xdf\xfe\xd5\x8a\xd1\x1eu;\x03\xa9p\x1d\xd20\xb4Uq]!ze\xcfIb\x07"\xbbeC\xedOQ()\x84\x8b\x132\x83\x94a\xb6\x03\x97N\xca%\xe9\xaa_&\x8da\xc2?\xeaU\xb5m\xba\xbc\xa4K|\x89\xdeM\xa9\x0ea\x91\xb4\x99\x05\xdd\xe6)l\x15w\x8f\xe5\xd4B\x13\x03o\xdeWI\xae}\x0ed\xdc\xeb\xd5\x10\xef'
res = b'\x8c\xbe\xe1\xbe<gc\xce\x19d!\xc7%\xd7\x9d\x87\xb8fw\r\xb2:\xef\xbcl\xfc\xc1^\xd0k\xf2\xa3\x03\xf4\xa0\x13\xf5j\xbdvN\xda\x1d\xf4\xe2\xe2C\xca\xa4h\xb2 \xf7}\xbc$\xac\xed\xb5\xd1\x1dm\xcd0d\xa1\x92\x7f\t\xa3\xa0:\x80\xce\x97\xe4\xbb\xa6\xa6d=\xd1\xd3\xe2\x8b\x87f\xd9>\xc5kQ5\xa3\xd1\x03\xea\xae\xf1\xac6[\xca\xa9\x995\x11=\x1b\x0fF\xa5\xddo\x8eM~aU L\x81\xc6\x07&\xe2\xbd\x1al\xa6\x19\x13\xdd\xd4\xf0\xe1\xc0\xba\xc11\x85x\xde\xcc\x7f\xca3\xa0\xcaZ\xf8 \xccb\xc0D\x04\x96\x19\xe5 \x86l\xfe\x14\xa0\x94?d\x99p\x11\xad\x18\x87\xb2\x9c\x86nO\x11b\xc5\xdd\x97[\x05\x93\x93{]\x88_\xc8x9\x11\xfdW\xeb\xfa\xcb=\xb4O\xcc%\x9e+G\xad\x82\xab\xf8\x7f\x81\x94\xee\xac/\xe5\x12\x05I\xf2\x8d\xa7j\xb4\xca\x8b\x17x\xd9\x0e\x92L\xcanjBL6\xcf\xbc\xa5\x82#\xfb\xe1\x01;\xc4\x01n*'

res2 = bytes([res[i*2] ^ 0x27 for i in range(128)])
res3 = bytes([res[i*2+1] ^ 0x86 for i in range(128)])

def tea_decrypt(x, key):
	r = b''
	delta = 0x9e3779b9
	k = struct.unpack('<IIII', key)
	for v in struct.iter_unpack('<II', x):
		v0, v1 = v
		sum = 0xf1bbcdc8
		mask = 0xffffffff
		for i in range(8):
			v1 -= ((v0 << 4) + k[2]) ^ (v0 + sum) ^ ((v0 >> 5) + k[3])
			v1 &= mask
			v0 -= ((v1 << 4) + k[0]) ^ (v1 + sum) ^ ((v1 >> 5) + k[1])
			v0 &= mask
			sum = (sum - delta) & mask
		r += struct.pack('<II', v0, v1)
	return r

c = AES.new(key[:16], AES.MODE_ECB)
m1 = int.from_bytes(c.decrypt(res2), 'little')
m2 = int.from_bytes(tea_decrypt(res3, key[:16]), 'little') & ~0xff
n = int.from_bytes(key, 'little')
e1, e2 = 8, 30841  # (-8)*65537+30841*17=1
m1_r = gmpy2.invert(m1, n)
for i in range(256):
	m = (gmpy2.powmod(m1_r, e1, n) * gmpy2.powmod(m2+i, e2, n)) % n
	try:
		print(n2s(m))
	except:
		continue
